<?php

namespace app\models;

use Yii;
use yii\base\Model;
use yii\helpers\ArrayHelper;
use function is_numeric;

/**
 * This is the model class for table "user".
 *
 * @property int $id
 * @property string|null $name
 * @property string|null $surname
 * @property string|null $number
 * @property string|null $address
 * @property string|null $birthday_date
 *
 * @property UserTag[] $userTags
 */
class User extends \yii\db\ActiveRecord
{
    public $tags;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'user';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['name', 'surname'], 'required'],
            [['address'], 'string'],
            [['birthday_date', 'tags'], 'safe'],
            [['name', 'surname', 'number'], 'string', 'max' => 255],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Name',
            'surname' => 'Surname',
            'number' => 'Number',
            'address' => 'Address',
            'birthday_date' => 'Birthday Date',
        ];
    }

    /**
     * Gets query for [[UserTags]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getUserTags()
    {
        return $this->hasMany(UserTag::class, ['user_id' => 'id']);
    }

    public function afterFind()
    {
        $this->tags = ArrayHelper::getColumn($this->userTags, 'tag.id');

        parent::afterFind(); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        UserTag::deleteAll(['user_id' => $this->id]);

        if (!empty($this->tags)) {
            foreach ($this->tags as $tagAttributeValue) {
                $tagAttribute = is_numeric($tagAttributeValue) ? 'id' : 'name';

                if ($tagAttribute === 'name' && empty($tagAttributeValue)) {
                    continue;
                }
                $tag = ModelHelper::getOrCreate(Tag::class, [$tagAttribute => $tagAttributeValue]);
                ModelHelper::getOrCreate(UserTag::class, [
                    'user_id' => $this->id,
                    'tag_id' => $tag->id
                ]);
            }
        }

        parent::afterSave($insert, $changedAttributes);
    }

    public function getTagsString(): string
    {
        return implode(', ', ArrayHelper::getColumn($this->userTags, 'tag.name'));
    }
}
